#Codigo realizado por Mário Henrique em Universidade Católica do Tocantins

import random
import datetime
import re

# Esta classe armazena os dados do cliente e utiliza "properties" para encapsulamento
# O encapsulamento impede que dados sensíveis, como senha e CPF, sejam alterados
# de forma acidental ou indevida.
class User:
    def __init__(self, name: str = None, cpf: str = None, account: str = None, agency: str = None, password: int = None):
        self.name = name
        self.__cpf = cpf
        self.__account = account
        self.__agency = agency
        self.__password = password

    # Decorator @property: permite acessar um método como se fosse um atributo
    # sem precisar usar parênteses, por exemplo, `user.cpf`.
    # Decorator @setter: permite modificar o valor de um atributo encapsulado,
    # como `user.cpf = "novo_cpf"`.
    @property
    def cpf(self):
        return self.__cpf

    @cpf.setter
    def cpf(self, new_cpf):
        self.__cpf = new_cpf

    @property
    def account(self):
        return self.__account

    @account.setter
    def account(self, new_account):
        self.__account = new_account

    @property
    def agency(self):
        return self.__agency

    @agency.setter
    def agency(self, new_agency):
        self.__agency = new_agency

    @property
    def password(self):
        return self.__password

    @password.setter
    def password(self, new_pass):
        self.__password = new_pass

# Esta classe contém toda a lógica bancária e das operações,
# como geração de credenciais, transações e validações.
class Bank:
    def __init__(self, user: User, balance: float = 0.00, limit: float = 0.00):
        self.user = user
        self.balance = balance
        self.limit = limit
        self.transactions = []
        self.pix_key = None

    # O decorator @staticmethod indica que o método não depende de uma instância da classe.
    # Ele pode ser chamado diretamente da classe, como `Bank.generationAcc()`.
    @staticmethod
    def generationAcc():
        generation_acc = random.randint(0, 10**7 - 1)
        dv = random.randint(0, 9)
        return f"{generation_acc:07}-{dv}"

    @staticmethod
    def generationAgen():
        generation_agen = random.randint(0, 10**4 - 1)
        dv = random.randint(0, 9)
        return f"{generation_agen:04}-{dv}"

    @staticmethod
    def generationPass():
        generation_pass = random.randint(0, 10**5 - 1)
        return generation_pass

    # Função para registrar todas as operações da conta no extrato.
    # O valor é registrado como negativo para saques e Pix enviados.
    def record_transaction(self, transaction_type, value):
        transaction = {
            'tipo': transaction_type,
            'valor': value,
            'data': datetime.date.today().strftime('%d/%m/%Y')
        }
        self.transactions.append(transaction)

    # Funções de transação, que retornam True/False e uma mensagem de status.
    # Essa abordagem facilita a comunicação com o front-end.
    def deposit(self, value):
        self.balance += value
        self.record_transaction('Depósito', value)
        return True, "Depósito realizado com sucesso."

    def withdraw(self, value):
        if value > self.balance + self.limit:
            return False, "Saldo e limite insuficientes para realizar a transação."
        self.balance -= value
        self.record_transaction('Saque', -value)
        return True, "Saque realizado com sucesso."

    def change_password(self, new_password):
        try:
            new_password = int(new_password)
            self.user.password = new_password
            return True, "Pronto! Sua senha foi alterada com sucesso!"
        except ValueError:
            return False, "A senha deve conter apenas números."

    def change_limit(self, new_limit):
        try:
            new_limit = float(new_limit)
            self.limit = new_limit
            return True, f"Pronto! Seu novo limite é de: R$ {self.limit:.2f}"
        except ValueError:
            return False, "Valor inválido. O limite não foi alterado."
            
    # Função para validar o formato de uma chave Pix (email, telefone ou CPF).
    # O método utiliza expressões regulares para garantir que o formato é válido.
    def validate_pix_key(self, pix_key):
        email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        phone_regex = r'^\+?\d{2,3}\d{9,11}$'
        cpf_regex = r'^\d{11}$'
        
        if re.match(email_regex, pix_key) or re.match(phone_regex, pix_key) or re.match(cpf_regex, pix_key):
            return True
        return False

    def create_pix_key(self, new_key):
        if not self.validate_pix_key(new_key):
            return False, "Chave Pix inválida. Use um formato de e-mail, telefone ou CPF."
        self.pix_key = new_key
        return True, f"Chave Pix '{self.pix_key}' cadastrada com sucesso!"

    def make_pix(self, destination_key, amount):
        if not self.pix_key:
            return False, "Você não tem uma chave Pix cadastrada."

        if not self.validate_pix_key(destination_key):
            return False, "Chave de destino inválida."

        if destination_key == self.pix_key:
            self.balance += amount
            self.record_transaction('Pix Recebido', amount)
            return True, f"Pix de R$ {amount:.2f} recebido com sucesso!"
        
        else:
            if amount > self.balance + self.limit:
                return False, "Saldo e limite insuficientes para realizar a transação."

            self.balance -= amount
            self.record_transaction('Pix Enviado', -amount)
            return True, f"Pix de R$ {amount:.2f} enviado para a chave '{destination_key}' com sucesso."

    def get_statement(self):
        return self.transactions, self.balance

# Esta classe gerencia o fluxo de controle da aplicação.
# Ela atua como a ponte entre a lógica de negócio (Bank) e a interface gráfica (GUI).
# O sistema de usuários é gerenciado aqui.
class ATM_Controller:
    def __init__(self):
        self.users = {}
        self.logged_in_user = None

    # Métodos que recebem os dados do front-end e retornam o resultado
    # para serem exibidos na interface.
    def register_gui(self, name, cpf):
        if not name or not cpf:
            return False, "Nome e CPF são obrigatórios.", None

        if not cpf.isdigit() or len(cpf) != 11:
            return False, "CPF inválido. Deve conter 11 dígitos numéricos.", None

        if cpf in self.users:
            return False, "Este CPF já está cadastrado.", None

        user = User(name, cpf)
        bank = Bank(user)
        
        bank.user.account = bank.generationAcc()
        bank.user.agency = bank.generationAgen()
        bank.user.password = bank.generationPass()
        
        self.users[cpf] = bank
        
        user_data = {
            "agencia": bank.user.agency,
            "conta": bank.user.account,
            "senha": bank.user.password
        }
        return True, "Conta criada com sucesso!", user_data

    def login_gui(self, agency, account, password):
        try:
            password = int(password)
        except ValueError:
            return False, "A senha deve conter apenas números."

        for cpf, bank_instance in self.users.items():
            if bank_instance.user.agency == agency and bank_instance.user.account == account and bank_instance.user.password == password:
                self.logged_in_user = bank_instance
                return True, "Login bem-sucedido."
        
        return False, "Dados de login incorretos. Tente novamente."

    # Método para o front-end obter os dados do usuário logado.
    def get_user_data(self):
        if self.logged_in_user:
            return {
                "name": self.logged_in_user.user.name,
                "agency": self.logged_in_user.user.agency,
                "account": self.logged_in_user.user.account,
                "balance": self.logged_in_user.balance,
                "limit": self.logged_in_user.limit
            }
        return None
    
    # As funções abaixo são apenas atalhos para os métodos da classe Bank,
    # usados para simplificar a chamada no front-end.
    def deposit(self, amount):
        return self.logged_in_user.deposit(amount)

    def withdraw(self, amount):
        return self.logged_in_user.withdraw(amount)

    def change_password(self, new_password):
        return self.logged_in_user.change_password(new_password)

    def change_limit(self, new_limit):
        return self.logged_in_user.change_limit(new_limit)

    def get_statement(self):
        return self.logged_in_user.get_statement()
    
    def create_pix_key(self, new_key):
        return self.logged_in_user.create_pix_key(new_key)
    
    def make_pix(self, destination_key, amount):
        return self.logged_in_user.make_pix(destination_key, amount)
